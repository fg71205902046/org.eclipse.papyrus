/******************************************************************************
 * Copyright (c) 2008, 2020 Borland Software Corporation, CEA LIST, Artal and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/ 
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors: 
 *    Artem Tikhomirov (Borland) - initial API and implementation
 *    Aurelien Didier (ARTAL) - aurelien.didier51@gmail.com - Bug 569174
 *****************************************************************************/

import gmf.CodeGenerationUtils;

modeltype gmfgen uses "http://www.eclipse.org/papyrus/gmf/2020/GenModel";

library Metrics;

-- MODIFIERS: cached
helper getNotationMetrics(c : gmfgen::GenMetricContainer) : Sequence(gmfgen::GenMetricRule) {
	return c.metrics->asSequence()->select(target.oclIsKindOf(gmfgen::GenNotationElementTarget))
}

-- MODIFIERS: cached
helper getDiagramMetrics(c : gmfgen::GenMetricContainer) : Sequence(gmfgen::GenMetricRule) {
	return c.metrics->asSequence()->select(target.oclIsKindOf(gmfgen::GenDiagramElementTarget))
}

-- MODIFIERS: cached
helper getDomainMetrics(c : gmfgen::GenMetricContainer) : Sequence(gmfgen::GenMetricRule) {
	return c.metrics->asSequence()->select(target.oclIsKindOf(gmfgen::GenDomainElementTarget))
}

helper calcMethodName(m : gmfgen::GenMetricRule) : String {
	return 'calc' + validJavaIdentifier(m.key).firstToUpper()
}

