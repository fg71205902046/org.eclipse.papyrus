/******************************************************************************
 * Copyright (c) 2012, 2020 Borland Software Corporation, CEA LIST, Artal
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/ 
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors: 
 *    Svyatoslav Kovalsky (Montages) - initial API and implementation
 *    Aurelien Didier (ARTAL) - aurelien.didier51@gmail.com - Bug 569174
 *****************************************************************************/
modeltype gmfgen uses "http://www.eclipse.org/papyrus/gmf/2020/GenModel";
modeltype ecore uses "http://www.eclipse.org/emf/2002/Ecore";

library Utils;


helper gmfgen::GenCommonBase::isOclChoiceLabel() : Boolean {
	return let labelModelFacet : gmfgen::LabelModelFacet 
		= if self.oclIsKindOf(gmfgen::GenChildLabelNode) then self.oclAsType(gmfgen::GenChildLabelNode).labelModelFacet 
	      else (if self.oclIsKindOf(gmfgen::GenLabel) then self.oclAsType(gmfgen::GenLabel).modelFacet 
	 	  else null 
	 	  endif)
	 	  endif	 	      
	in (labelModelFacet <> null) 
		and labelModelFacet.parser.oclIsKindOf(gmfgen::OclChoiceParser);
}

helper gmfgen::GenCommonBase::isOclChoiceLabelWithShowExpr() : Boolean {
	return let labelModelFacet : gmfgen::LabelModelFacet 
		= if self.oclIsKindOf(gmfgen::GenChildLabelNode) then self.oclAsType(gmfgen::GenChildLabelNode).labelModelFacet 
	      else (if self.oclIsKindOf(gmfgen::GenLabel) then self.oclAsType(gmfgen::GenLabel).modelFacet 
	 	  else null 
	 	  endif)
	 	  endif	 	      
	in (labelModelFacet <> null) 
		and labelModelFacet.parser.oclIsKindOf(gmfgen::OclChoiceParser)
		and (labelModelFacet.parser.oclAsType(gmfgen::OclChoiceParser).showExpression <> null);
}

helper isChoiceLabel(modelFacet : gmfgen::LabelModelFacet) : Boolean {
	return modelFacet.parser.oclIsKindOf(gmfgen::PredefinedEnumParser)
			or modelFacet.parser.oclIsKindOf(gmfgen::OclChoiceParser);
}

helper getDirectManagerFQN(modelFacet : gmfgen::LabelModelFacet) : String {
	return 
	 (if isChoiceLabel(modelFacet) then 
		-- 'org.eclipse.gmf.runtime.diagram.ui.tools.ComboDirectEditManager'
		'org.eclipse.gmf.tooling.runtime.directedit.ComboDirectEditManager'
	  else
		'org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager'
	  endif);
}