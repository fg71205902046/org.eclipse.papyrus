/******************************************************************************
 * Copyright (c) 2007, 2020 Borland Software Corporation, CEA LIST, Artal and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/ 
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors: 
 *    Artem Tikhomirov (Borland) - initial API and implementation
 *    Aurelien Didier (ARTAL) - aurelien.didier51@gmail.com - Bug 569174
 *****************************************************************************/

«IMPORT 'http://www.eclipse.org/papyrus/gmf/2020/GraphicalDefinition'»
«IMPORT 'http://www.eclipse.org/emf/2002/Ecore'»

«EXTENSION Util»

«DEFINE Top(packageStmt : String) FOR gmfgraph::FigureDescriptor»
«IF packageStmt <> null and packageStmt.size() > 0»package «packageStmt»;
«ENDIF-»
/**
 * @generated
 */
public class «compilationUnitName(self)» extends «EXPAND Runtime::fqn FOR actualFigure» {
«EXPAND body»
«additionalStaticFields()»
}
«ENDDEFINE»



«DEFINE Inner FOR gmfgraph::FigureDescriptor»
/**
 * @generated
 */
public class «compilationUnitName(self)» extends «EXPAND Runtime::fqn FOR actualFigure» {
«EXPAND body»
}
«additionalStaticFields()»
«ENDDEFINE»

«REM»«ENDREM»
«DEFINE body FOR gmfgraph::FigureDescriptor»

«EXPAND accessorField FOREACH accessors->select(a | not (allCustomAccessors(self).typedFigure)[gmfgraph::Figure]->includes(a.figure))»

«FOREACH filterCustom(Sequence {self.actualFigure}) AS custom»«IF needsField(custom)»«EXPAND accessorCustomField FOR custom»«ENDIF»«ENDFOREACH»

«EXPAND Figure::ClassBody(compilationUnitName(self)) FOR actualFigure»

«EXPAND accessorToField FOREACH accessors->select(a | not (allCustomAccessors(self).typedFigure)[gmfgraph::Figure]->includes(a.figure))»
«FOREACH accessors->select(a | (allCustomAccessors(self).typedFigure)[gmfgraph::Figure]->includes(a.figure))->asSequence() AS a-»
«EXPAND accessorToCustom(getCustomFigureChainFigureAccess(a)) FOR a»
«ENDFOREACH-»
«ENDDEFINE»


«DEFINE accessorField FOR gmfgraph::ChildAccess-»
	/**
	 * @generated
	 */
	private «EXPAND Runtime::fqn FOR figure» «self.figureFieldName()»; 
«ENDDEFINE»

«DEFINE accessorCustomField FOR gmfgraph::CustomFigure-»
	/**
	 * @generated
	 */
	private «EXPAND Runtime::fqn FOR self» «self.figureFieldName()»;
«ENDDEFINE»

«REM»ChildAccess points to figure we've generated, there's a field for it«ENDREM»
«DEFINE accessorToField FOR gmfgraph::ChildAccess-»
	/**
	 * @generated
	 */
	public «EXPAND Runtime::fqn FOR figure» «accessor»() {
		return «self.figureFieldName()»;
	}
«ENDDEFINE»

«REM»ChildAccess points to some child of a CustomFigure, need to delegate to it's accessor
Perhaps, should add support for ChildAccess not being generated (in case they are have same name as 
FigureAccessor.accessor
«ENDREM»
«DEFINE accessorToCustom(fa : Sequence(gmfgraph::FigureAccessor)) FOR gmfgraph::ChildAccess-»
	/**
	 * @generated
	 */
	public «EXPAND Runtime::fqn FOR figure» «accessor»() {
		return «fa->first().oclAsType(ecore::EObject).eContainer().oclAsType(CustomFigure).figureFieldName()-»
			«FOREACH fa AS figureAccessor»«IF figureAccessor.accessor <> null and not figureAccessor.accessor->isEmpty()».«figureAccessor.accessor»()«ELSE-»
				«ERROR 'Invalide figure accessor' + figureAccessor.repr()»«ENDIF»«ENDFOREACH»;
	}
«ENDDEFINE»