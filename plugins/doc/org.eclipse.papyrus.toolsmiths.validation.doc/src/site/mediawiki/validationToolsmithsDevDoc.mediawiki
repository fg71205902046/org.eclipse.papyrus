=Overview=
Papyrus provides for validation of tooling models for DSML and other customization plug-ins, including:

* Validation of a UML '''profiles''', both static (generated) and dynamic
* Validation of '''element types configurations'''
* Validation of '''architecture domain''' models

Validation is provided on-demand via the '''Papyrus Developer''' context menu and optionally also as a project builder.

==Papyrus Plug-in Builder==

To enable automatic validation of tooling models in your customization plug-ins, configure the '''Papyrus Plug-in''' nature on
your customization plug-in projects. In the context menu for your project, select the '''Configure &rarr; COnvert to Papyrus Plugin''' action:

[[File:images/devDoc/Papyrus_ConfigurePluginNature.png|frame|none|Configure the Papyrus Plug-in project nature]]

What is checked by the builder depends on settings in the '''Preferences'''. By default, the '''Papyrus Plug-in Builder''' performs no validation.
To configure it, open the '''

==Profile Plug-in Validation==

All checks described in this section apply equally to on-demand validation via the context menu and
automatic validation by the '''Papyrus Plug-in Builder'''.

===What is checked?===
To validate a profile plug-in, we have some points to check. Here are the checked points:
* For each profile found in the plug-in:
** Validation of the profile definition into the 'plugin.xml' file: '''ERROR''' (for 'generated_package' extension) and '''WARNING''' (for 'UMLProfile' extension)
** Validate that the profile has no definition because it's not working with static profile: '''ERROR'''
** Validation of the dependencies needed in the 'MANIFEST.MF' file for the external dependencies of the profile file: '''WARNING''' (because maybe the dependency is not really needed (implicit dependence?))
** Validation of the 'build.properties' file (it must contain the profile file): '''ERROR'''

===How to do it?===
When you create a plug-in containing a profile, you can validate this one with the validation toolsmiths.
To do this, select the project, then ''''Papyrus Developer''''>''''Validate Profile plug-in'''':

[[File:images/devDoc/Papyrus_ValidationProfileMenu.png|frame|none|Menu to validate profile plug-in]]

When you do a validation, the result of old profile plug-in validation are clean and the current problems are displayed in the corresponding view.

[[File:images/devDoc/Papyrus_PluginBuilderPreferences.png|frame|none|Papyrus plug-in builder preferences]]

There are a number of options available to enable:

* whether to check anything at all when building a Papyrus project
* whether to validate Papyrus tooling customization models. And, if so, whether to
** check that model dependencies implied by tooling models are included in the bundle manifest
** check other well-formedness rules of the models, themselves
* whether to validate bundle and plug-in manifests. And, if so, whether to
** check for the anti-pattern of dependency re-exports
** check for the recommended practice of constraining bundle dependencies with compatible version ranges

===Where find the result?===
The result is display in the ''''Problems'''' view and are categorized by the type ''''Papyrus Toolsmiths Profile Plug-in problems''''.

[[File:images/devDoc/Papyrus_ProblemsViewProfile.png|frame|none|Profile problems]]

Like others problems, you can double-click on one to open the concerning file. You can delete problem too when you think it is managed.

==Element Types Plug-in Validation==
===What is checked?===
To validate a element types plug-in, we have some points to check. Here are the checked points:
* Bundle manifest dependencies on core element-types framework bundles: '''WARNING'''
** 'org.eclipse.papyrus.infra.types.core'
** 'org.eclipse.papyrus.infra.types'
* For each element types copnfiguration model found in the plug-in:
** Validation of the element types file itself: errors or warnings as described for different elements, below
** Validation of the element types model registration in the 'plugin.xml' file
*** if there is a registration on the extension point, and it omits the client-context ID: '''ERROR'''
*** if there is no registration extension and there is no architecture model that references it: '''WARNING'''
** Validation of bundle dependencies in the 'MANIFEST.MF' file implied by the element-types configuration model:
*** missing dependency on the bundle that deploys the metamodel referenced by NS URI: '''ERROR'''
*** referenced metamodel NS URI that cannot be resolved to a bundle that provides the metamodel: '''ERROR'''
*** missing dependency on the bundle that deploys a referenced element-types model: '''ERROR'''
*** missing dependency on the bundle that deploys a profile referenced by UML stereotype element-types: '''ERROR'''

There are special element-types configuration elements available for definition of element types on the basis of the
stereotypes in UML profiles. These are validated for availability or suitability of the referenced UML profile constructs:
* ''Apply Stereotype Advice''
** profile referenced by qualified name is not found in the workspace nor in the target platform: '''ERROR'''
** stereotype referenced by qualified name is not found in any profile in the workspace nor in the target platform: '''ERROR'''
** a ''Feature to Set'' is not contained by an ''Apply Stereotype Advice Configuration'': '''ERROR'''
** a ''Feature to Set'' references a feature that the stereotype does not have: '''ERROR'''
* ''Stereotype Application Matcher'' (and, by inheritance, the ''Stereotype Application Matcher Advice'')
** profile referenced by namespace URI is not found in the workspace nor in the target platform: '''ERROR'''
** stereotype referenced by qualified name is not found in any profile in the workspace nor in the target platform: '''ERROR'''
* ''Stereotype Property Reference Edge Advice''
** stereotype referenced by qualified name is not found in any profile in the workspace nor in the target platform: '''ERROR'''
** the feature to set references a feature that the stereotype does not have: '''ERROR'''
** the feature to set does not have a type, and therefore cannot be set: '''ERROR'''

The rules above are not checked in the ''Element Types Configurations Editor'' while editing a model because they
depend on the deployment of dependent resources in tooling bundles. Therefore, they are only checked by the
tooling validation mechanisms described in this documentation. Other intrinsic model well-formedness constraints
for element types configurations are checked by the editor; they are described in the documentation of the
''Element Types Configurations'' model.

===How to do it?===
When you create a plug-in containing an element types file, you can validate this one with the validation toolsmiths.
To do this, select the project, then ''''Papyrus Developer''''>''''Validate Element types plug-in'''':

[[File:images/devDoc/Papyrus_ValidationElementTypesMenu.png|frame|none|Menu to validate element types plug-in]]

When you do a validation, the result of old element types plug-in validation are clean and the current problems are displayed in the corresponding view.

===Where find the result?===
The result is display in the ''''Problems'''' view and are categorized by the type ''''Papyrus Toolsmiths Element Types Plug-in problems''''.

[[File:images/devDoc/Papyrus_ProblemsViewElementTypes.png|frame|none|Element types problems]]

Like others problems, you can double-click on one to open the concerning file. You can delete problem too when you think it is managed.

==Architecture Plug-in Validation==
===What is checked?===
To validate an architecture plug-in, we have some points to check. Here are the checked points:
* Validation of the needed dependencies: '''ERROR'''
** 'org.eclipse.papyrus.infra.architecture'
* For each architecture files found in the plug-in:
** Validation of the architecture file itself: '''ERROR'''
** Validation of the architecture definition into the 'plugin.xml' file: '''ERROR'''
** Validation of the dependencies needed in the 'MANIFEST.MF' file for the external dependencies of the architecture file: '''WARNING''' (because maybe the dependency is not really needed (implicit dependence?))
** Validation of the 'build.properties' file (it must contain the architecture file): '''ERROR'''

===How to do it?===
When you create a plug-in containing an architecture definition, you can validate this one with the validation toolsmiths.
To do this, select the project, then ''''Papyrus Developer''''>''''Validate Architecture plug-in'''':

[[File:images/devDoc/Papyrus_ValidationArchitectureMenu.png|frame|none|Menu to validate architecture plug-in]]

When you do a validation, the result of old architecture plug-in validation are clean and the current problems are displayed in the corresponding view.

===Where find the result?===
The result is display in the ''''Problems'''' view and are categorized by the type ''''Papyrus Toolsmiths Architecture Plug-in problems''''.

[[File:images/devDoc/Papyrus_ProblemsViewArchitecture.png|frame|none|Architecture problems]]

Like others problems, you can double-click on one to open the concerning file. You can delete problem too when you think it is managed.

